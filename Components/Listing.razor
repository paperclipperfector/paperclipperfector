@implements IDisposable

@if (HasPostButton && postText == null)
{
    <div class="postbutton-container">
        <button class="button postbutton" @onclick="MakePost">
            Make a new post
        </button>
    </div>
}

@foreach (var post in posts)
{
    <div class="post">
        <ReportWidget post="@post" selection="@(active => SetSelection(post.id, active))" />
        <div class="body">@((MarkupString)post.html)</div>
        <ReportWidget post="@post" controls="true" />
    </div>
}

@if (postText != null)
{
    <textarea class="finaltext">@postText</textarea>
}

@code {
    [Parameter] public Db.PostState segment { get; set; }

    private Db.Post[] posts = null;
    private HashSet<string> activeSelection = new HashSet<string>();

    private string postText = null;

    public bool HasPostButton
    {
        get => segment == Db.PostState.Approved;
    }

    protected override void OnParametersSet()
    {
        Db.Instance.RegisterCallback(StateHasChangedThreadsafe);

        posts = Db.Instance.ReadAllPosts(segment);
    }

    public void StateHasChangedThreadsafe()
    {
        InvokeAsync(StateHasChanged).ContinueInBackground();
    }

    public void Dispose()
    {
        Db.Instance.UnregisterCallback(StateHasChangedThreadsafe);
    }

    public void SetSelection(string id, bool active)
    {
        if (active)
        {
            activeSelection.Add(id);
        }
        else
        {
            activeSelection.Remove(id);
        }
    }

    public void MakePost()
    {
        // Update with a spinner?

        // Do the DB change
        if (!Db.Instance.MoveToPosted(activeSelection) || true)
        {
            Dbg.Err("whoops no");
            return;
        }

        // Generate post text
        string result = "";
        foreach (var post in posts.Where(post => activeSelection.Contains(post.id)))
        {
            IEnumerable<string> lines = post.text.Split("\n").Where(line => !line.StartsWith(">"));
            string text = string.Join(" ", lines);
            IEnumerable<string> words = text.Split(new char[] {' ', '\n', '\t'}).Where(word => word.Length > 0);
            string blurb = string.Join(" ", words.Take(20));    // TODO: split it based on character count, not word count?

            result += $"/u/{post.author}: \"{blurb}...\" ([link]({post.link}?context=3&sort=best))  \n";
        }

        postText = result;

        // Clear it out!
        posts = new Db.Post[0];

        StateHasChanged();
    }
}
